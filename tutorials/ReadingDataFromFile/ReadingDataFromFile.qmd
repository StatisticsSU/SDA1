---
title: "Reading data from a file"
author: "Mattias Villani"
format: html
editor: visual
---

## Excel data

Data often come in the form of Excel files, usually named `SomeData.xls` or `SomeData.xlsx`, where `SomeData` is the name that you or someone else have given to the file. Excel stores data as tables with rows and columns, like this:

![](ExcelSpreadsheet.png){fig-align="center" width="560"}

Excel files may contain more than one dataset, organized as Excel *sheets*. Here is an example (note the multiple sheets at the bottom):

![](ExcelSheets.png){fig-align="center" width="291"}

## Reading data from an Excel file in R

There are many R packages for reading data from Excel. We will be using the `openxlsx` package here. This installs and loads the `openxlsx` package:

```{r}
#install.packages("openxlsx") # Installs the openxlsx package. Do it only once.
library("openxlsx")           # loads the openxlsx package. Do it once per R session.

```

::: callout-note
I have *commented out* the installation of the package by putting a `#` sign in front of the command `install.packages("openxlsx")`. So this command will not be executed/run. I already have that package installed on my computer and don't want to re-install it. You have to *uncomment*, that is remove the sign `#`, before running this on your computer, if you haven't installed this package already.
:::

```{r}
tour_de_france <- read.xlsx('Tour_de_France_2017.xlsx', sheet = 1)
```

The argument `sheet=1` tells R to read data from the first sheet in the Excel file. If you want to the read data from the third sheet in an Excel file, then just replace 1 with 3 (the Tour de France data has only one sheet, however).

::: callout-important
I placed the file Tour_de_France_2017.xlsx in my working directory. If the file with data is at a different place on your computer then you need to include the search **path** to the file before the file name. For example, on a computer running Windows, if your data is stored in the Documents folder, then replace the command above with

`tour_de_france <- read_excel('C:\Documents\Tour_de_France_2017.xlsx', sheet = 1)`
:::

::: callout-tip
Rather than telling R explicitly where your data are stored, you can also use the command

`tour_de_france <- read.xlsx(file.choose(), sheet = 1)`

which will open up a window where you can look up the file in your file explorer and it will then read the first sheet (again the `1` in the command) of that file. This is convenient, but I don't recommend it (lousy tip! ðŸ™„) since you then have to click your way to the file everytime you re-run your R code.
:::

We have now read the dataset into a variable that I have chosen to call `tour_de_france`. We can now just type the name of this variable in the Console in R to see the data. The dataset contains many observations so it would be a long printout. A better way to get a quick look at the data, is to use the `head` command, showing only the first few observations of the dataset:

```{r}
head(tour_de_france)
```

Note that some accented letters like Ã© were replaced by a question mark. The variable `tour_de_france` is a table of a specific type called `dataframe`, which is R's main way of storing a table.

You can now start analyzing the data in different ways, perhaps plotting the average speed variable over the year that Tour de France has run:

```{r}
plot(Average.Speed ~ Year, data = tour_de_france)
```

The average speed has increased over the year. Notable exceptions are the years during following the first world war.

## Reading data from text (.txt) and .csv files

Data may also come as a pure text file, often with the file ending `.txt`. Such files contain a simple table with the data. The first row may or may not contain the names of the variables in the columns. The columns are separated by a *separator*, typically a comma (`,`) or a `TAB` (blank space of a certain width). Here is an example with data from Indy car drivers:

![](indydata_txtformat.png){fig-align="center" width="483"}

Note how the columns are not nice aligned, but clearly separated by blank space (TAB) so that R can understand which numbers belongs to which variable (column). Note also that the first row contain the variable names: `Year`, `Winner`, `Chassis`, `Engine`, `Speed`, `Time_hrs` and `Distance`.

Let's read this text file with data into R using the built-in function `read.delim`

```{r}
indy <- read.delim('Indy_500_2018.txt', header = TRUE)
head(indy)
```

where the argument `header = TRUE` tells R that the first row in the dataset contains the names of the variables in the data.

Finally, a very common file format is `csv` , which stands for **c**omma-**s**eparated **v**alues. These are similar to `txt` files, but are read into R using the built-in `read.csv` function.

::: callout-tip
Both the `read.delim` and `read.csv` have an argument `sep` that can be used to specify which *delimiter* is used in the file. For example, a `txt` files where the columns are separated by a comma instead of `TAB` can be read by the command:

`my_data <- read.delim('myfile.txt', sep = ",", header = TRUE)`
:::
