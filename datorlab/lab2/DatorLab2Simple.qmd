---
title: "Statistik och dataanalys I, 15 hp "
subtitle: "Datorlaboration 2"
author: 
  - Byt ut mot namnet p친 student 1
  - Byt ut mot namnet p친 student 2
  - Byt ut mot namnet p친 student 3
date: last-modified
format: 
  html:
    self-contained: true
toc: true
execute:
  error: false
language: 
  title-block-author-single: " "
toc-title-document: "Inneh친ll"
crossref-fig-title: "Figur"
theme: Superhero
editor: visual
---


::: callout-warning
Den h칛r labben f칬ruts칛tter att f칬ljande paket finns installerade:

-   `openxlsx`

-   `mosaic`

Paket kan installeras via kommandot `install.packages('packagename')`, d칛r `'packagename'` 칛r namnet p친 paketet, t.ex `'mosaic'`.
:::

## Introduktion

> I den h칛r datorlabben kommer vi att titta p친 hur f칬rdelningar f칬r olika typer av variabler kan beskrivas numeriskt och grafiskt.

#### 游눩 Uppgift 0.3

L칛gg till en ny code chunk och st칛ll in 'working directory' till den nya mappen genom att f칬lja anvisningarna fr친n [Lab 1](https://statisticssu.github.io/SDA1/datorlab/lab1/DatorLab1.html#st%C3%A4lla-in-arbetsmappen-working-directory-i-r).

```{r}
# Fyll i l칬sning f칬r Uppgift 0.3 h칛r
```

## 1. Skapa tabeller f칬r kategoriska variabler

Installerar n친gra paket som ska anv칛ndas f칬r laborationen.

```{r}
#install.packages("openxlsx") # Kommentera bort denna rad om redan har openxlsx installerat fr친n Lab 1
#install.packages("mosaic") # Kommentera bort denna rad efter att du k칬rt Quarto-filen f칬rsta g친ngen
suppressMessages(library(openxlsx))
suppressMessages(library(mosaic))
```

Vi l칛ser in datamaterialet direkt fr친n webben:

```{r}
titanic = read.xlsx("https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab2/Chapter_3.xlsx", sheet = "Titanic")
```

#### 游눩 Uppgift 1.1

츿ndra koden ovan s친 `read.xlsx()` ist칛llet l칛ser in filen 'Chapter_3.xlsx' fr친n din dator.

Variabeln `Survived` i datasetet 칛r en kategorisk variabel med tv친 kategorier `Dead` och `Alive`. N칛r en variabel bara har tv친 kategorier brukar man ocks친 s칛ga **bin칛r variabel**. Man kan r칛kna antalet observationer som tillfaller varje kategori och p친 s친 s칛tt skapa en frekvenstabell med funktionen `tally()` i `mosaic`-paketet enligt nedan.

```{r}
tab_survived <- tally(~ Survived, data = titanic)
tab_survived
```

Genom att l칛gga till argumentet `format = proportion` i `tally()` r칛knas de relativa frekvenserna ist칛llet.

```{r}
tally(~ Survived, data = titanic, format = "proportion")
```

Vill man ha detta presenterat i procent kan man enkelt skriva `format = percent` ist칛llet f칬r `proportion`

```{r}
tally(~ Survived, data = titanic, format = "percent")
```

Allts친 칬verlevde endast 32.2% av de som befann sig p친 Titanic, medan 67.8% dog.

#### 游눩 Uppgift 1.1

Variabeln `Class` talar om biljettklass passageraren reste med (1:a, 2:a, 3:e eller Crew (bes칛ttning)). Presentera det totala antalet inom varje biljettklass. Vilken kategori 칛r st칬rst?

```{r}
# Write your code here
```

#### 游눩 Uppgift 1.2

Ber칛kna den relativa frekvensen (i procent) inom varje biljettklass.

```{r}
# Write your code here
```

## 2. Grafisk illustration av kategoriska variabler

Ett enkel pajdiagram f친s genom koden:

```{r}

table_rel_freq = tally(~ Survived, data = titanic, format = "proportion")
pie(x = table_rel_freq)
```

Och h칛r 칛r en lite mer informativt diagram:

```{r}
rel_frequencies = round(table_rel_freq, 2) # round the numbers to two decimals
rel_frequencies
category_names = names(table_rel_freq)
category_names
colors = c("lightblue", "purple")
pie(x =  table_rel_freq, labels = rel_frequencies, col = colors)
legend("topright", legend = category_names, fill = colors)

```

#### 游눩 Uppgift 2.1

Skapa ett pajdiagram av variabeln `Class` i titanic. Anv칛nd dig g칛rna av utr칛kningarna fr친n Uppgift 1.2 f칬r att skapa grafen. V칛lj sj칛lv om du vill illustrera det som andelar eller i procent.

```{r}
# Write your code here
```

#### 游눩 Uppgift 2.2

Vad 칛r det f칬r fel p친 denna graf?

```{r}

rel_frequencies = c(0.1, 0.9)
category_names = names(table_rel_freq)
colors = c("lightblue", "purple")
pie(x =  table_rel_freq, labels = rel_frequencies, col = colors)
legend("topright", legend = category_names, fill = colors)

```

```{r}
bargraph(~ Survived, data = titanic, type = "proportion")
```

```{r}
#| label: fig-andelar
#| fig-cap: "Relative frequency of Survival on the Titanic"
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.80)
colors = c("lightblue", "purple")

bargraph(~ Survived, data = titanic, type = "proportion", 
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```

#### 游눩 Uppgift 2.3

Justera diagrammet nedan s친 att det ser mer presentabelt ut. Byt ocks친 ut f칛rgerna mot tv친 andra bland [R's standardf칛rger](https://r-graph-gallery.com/42-colors-names.html).

```{r}
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.1)

bargraph(~ Survived, data = titanic, type = "proportion",  
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```

#### 游눩 Uppgift 2.4

R칛tta till felet i f칬ljande diagram:

```{r}
x_axis_title = "Survival"
y_axis_title = "Frequency"

bargraph(~ Survived, data = titanic, type = "count", 
         xlab = x_axis_title, ylab = y_axis_title, col = colors)

```

#### 游눩 Uppgift 2.5

Skapa ett stapeldiagram med funktionen `bargraph()` f칬r variabeln `Class` i titanic. Anv칛nd relativa frekvenser denna g친ng.

```{r}
# Write your code here
```

## 3. Dataset som best친r av saknade v칛rden

Vi tar bort saknade v칛rde i variabeln Age:

```{r}

length(titanic$Age) # number of observations originally
Age = na.omit(titanic$Age)
length(Age) # the number of observations when missing values are removed

```

#### 游눩 Uppgift 3.1

Definiera en ny variabel `Paid` fr친n kolumnen `Paid` i datasetet `titanic` p친 liknande s칛tt som ovan. Rensa bort eventuella saknade v칛rden med funktionen `na.omit()`.

```{r}
# Write your code here
```

## 4. Grafisk presentation av numeriska variabler

H칛r 칛r ett exempel med funktionen `histogram()`:

```{r}
#| label: fig-hist
#| fig-cap: "Distribution of Age onboard the Titanic"
histogram(~ Age, data = titanic, col = "navyblue")
```

Och h칛r med density

```{r}
#| label: fig-density
#| fig-cap: "Distribution of Age onboard the Titanic"
densityplot(~ Age, data = titanic, col = "navyblue")
```

#### 游눩 Uppgift 4.1

Rita ett histogram likt ovan, med samma variabel men med en annan f칛rg. Testa dig fram med `breaks` argumentet tills du hittar vad du tycker 칛r ett passande antal staplar. Rita sedan ett till likadant histogram men anv칛nd dig av Sturges regel denna g친ng f칬r att best칛mma hur m친nga staplar som ska anv칛ndas. Ser histogrammet b칛ttre ut 칛n det du ritade utan Sturges regel?

```{r}
# Write your code here
```

#### 游눩 Uppgift 4.2

Rita ett histogram 칬ver variabeln `Paid`.

```{r}
# Write your code here
```

#### 游눩 Uppgift 4.3

Vilket m친tt av medelv칛rdet eller medianen beskriver centralpunkten i f칬rdelningen f칬r `Paid` b칛st?

#### 游눩 Uppgift 4.4

Rita t칛thetsplottar f칬r variablerna `Age` och `Paid`.

```{r}
# Write your code here
```

```{r}
hist_Age = hist(x = Age,  col = "coral")
frequencies = hist_Age$count
frequencies
```

I det f칬rsta argumentet i funktionen `barplot()` l칛gger vi in frekvenserna som nyss r칛knades ut. Det andra argumentet `names.arg` 칛r till f칬r att namnge de olika 친ldersintervallen ovan, p친 x-axeln. Argumentet `las = 3` g칬r endast s친 att texten p친 x-axeln blir lodr칛t.

```{r}

Age_Intervals = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", 
              "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69",
              "70-74")

barplot(frequencies, names.arg = Age_Intervals, las = 3,
        main = "Frequency of Age onboard the Titanic")
```

Histogrammet som skapades innan g친r allts친 i princip att g칬ra om till ett stapeldiagram, d칛r h칬jden p친 stapeln illustrerar hur m친nga observationer det 칛r som tillfaller varje 친lderskategori. :::

## 5. Numerisk beskrivning av kvantitiva variabler

Om man anv칛nder sig av en frekvenstabell f칬r en numerisk variabel riskerar man i v칛rsta fall att f친 en tabell som 칛r lika l친ng som antal observationer man har. Kanske har man inte ens ett enda fall d칛r tv친 olika observationer har samma v칛rden. D칛rf칬r anv칛nds ofta andra beskrivande m친tt. Bland de viktigaste 칛r **l칛gesm친tten** som f친ngar f칬rdelningens mittpunkt

-   medelv칛rde
-   median

och spridningsm친tten som m칛ter variationen kring f칬rdelningens mittpunkt:

-   varians
-   standardavvikelse
-   variationsbredd (`range` p친 engelska: skillnaden mellan maximum och minimumv칛rdet)
-   Interkvartila avst친ndet (IQR).

Funktionen `favstats()` i `mosaic`-paketet ber칛knar dessa m친tt:

```{r}
favstats(~ Age, data = titanic)
```

Funktionen r칛knar ut olika f칬rdelningsm친tt, s친som minimumv칛rdet, maximumv칛rdet, f칬rsta och tredje kvartilen samt medelv칛rdet och medianen. B친de medelv칛rdet och medianen 칛r m친tt p친 en f칬rdelnings mittpunkt men hur l칛mpliga de 칛r som m친tt beror p친 f칬rdelningens utseende. Vi ser 칛ven att funktionen ocks친 skriver ut hur m친nga v칛rden datasetet best친r av och antalet saknade v칛rden.

Ibland vill man dock inte skriva ut all denna information f칬r en variabel. I Datorlaboration 1 anv칛nde vi oss av funktionen `mean()` f칬r att r칛kna ut medelv칛rdet av en variabel. N친gra andra vanliga funktioner ut칬ver dessa 칛r `var()` och `sd()`. Matematiskt motvaras dessa tre funktioner av: \begin{align}\nonumber
\overline{y}= \frac{1}{n} \sum_{i=1}^n y_i \\ \nonumber
s^2 =\frac{\sum_{i=1}^n(y_i-\overline{y})^2}{n-1}
\end{align} och \begin{align}
s = \sqrt{s^2}
\end{align}

#### 游눩 Uppgift 5.1

Anv칛nd funktionerna ovan f칬r att r칛kna ut medelv칛rdet, variansen och standardavvikelsen f칬r variabeln `Age`. Kan man r칛kna ut standardavvikelsen p친 n친got annat s칛tt i R?

```{r}
# Write your code here
```

#### 游눩 Uppgift 5.2

R칛kna ut det variationsbredden samt det interkvartila avst친ndet av variabeln `Age` fr친n utskriften vi fick fr친n funktionen `favstats()`.

```{r}
# Write your code here
```

## 6. Indexering och upprepning (loopar)

L친t oss titta p친 ett dataset 칬ver UFC's top 10 kampsportsut칬vare i Welterweight klassen bland m칛n (december 2022). Nedan matas v칛rdena in i vektorer och sedan s칛tts alla variabler ihop i en och samma tabell med funktionen `data.frame()`:

```{r}
# Defining variables:
Name = c("Kamaru Usman", "Colby Covington", "Khamzat Chimaev", "Belal Muhammed",
         "Gilbert Burns","Stephen Thompson", "Geoff Neal", "Sean Brady", 
         "Vicente Luque", "Shavkat Rakhmanov" )
Rank = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
Wins_by_knockout = c(9, 4, 6, 5, 6, 8, 9, 3, 11, 8)
Takedown_avg = c(3.01, 4.05, 3.98, 2.19, 2, 0.27, 0.59, 2.8, 0.51, 2.31)
Age_fighters = c(35,34,27, 34, 35, 39, 31, 29, 30, 27)

# Creating a dataframe with all the variables just defined above:
UFC = data.frame(Name, Rank, Wins_by_knockout, Takedown_avg, Age_fighters)
UFC

```

Datasetet best친r av fem stycken variabler och 칛r sorterat efter `Rank`. I Lab 1 tittade vi lite p친 **indexering** och detta bygger vidare p친 det. L친t s칛ga att vi vill veta vad 친ldern 칛r f칬r den 6:e rankade ut칬varen. I detta fall 칛r datasetet v칛ldigt litet och man kan genast identifiera alla individer. Ibland har vi dataset som 칛r v칛ldigt stora och d친 kan man beh칬va anv칛nda sig av indexering f칬r att f친 ut information om en enskild (eller ett f친tal) observationer av intresse. F칬r att ta reda p친 친ldern p친 den 6:e rankade ut칬varen kan man d친 anv칛nda sig av koden `UFC[6, 5]`. D칛r siffran till v칛nster om kommatecknet i hakparantesen anger radtalet och siffran till h칬ger om kommatecknet anger kolumntalet. Detta ger oss svaret 39.

#### 游눩 Uppgift 6.1

Anv칛nd indexering f칬r att skriva ut hur m친nga wins by knockout Gilbert Burns har haft.

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.2

Anv칛nd indexering f칬r att skriva ut all information om Kamaru Usman (dvs den f칬rsta raden). \[Ledtr친d: om man inte skriver n친got alls efter kommatecknet i indexeringen f친r man *alla* v칛rden i den raden\]

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.3

Anv칛nd indexering f칬r att skriva ut alla v칛rden f칬r variabeln `Takedown_avg` (dvs den 4:e kolumnen).

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.4

```{r}
for (i in 1:10){
  print(i)
}

```

Anv칛nd loopen ovan men byt ut indexvariabeln `i` till `k` ist칛llet. K칬r sedan loopen. Vad 칛r det som h칛nder?

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.5

Anv칛nd 친terigen loopen i exemplet ovan. Men 칛ndra variabeln `i`s definitionsm칛ngd fr친n 1:10 till 24:33.

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.6

G칬r p친 samma vis som i 칬vningen ovan men 칛ndra nu definitionsm칛ngden fr친n 1:10 till -3:5

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.7

Anv칛nd en `for`-loop f칬r att skriva ut varje v칛rde p친 variabeln `Wins_by_knockout`.

```{r}
# Write your code here
```

Den introduktionen till loopar kan r칛cka f칬r tillf칛llet. Men om du tyckte det var intressant kan du forts칛tta l칛sa lite mer om loopar nedan.

#### 游눩 Uppgift 6.8

Funktionen `sum()` i R kan anv칛ndas f칬r att summera numeriska v칛rden i en vektor. Anv칛nd denna funktion f칬r att r칛kna ut medelv칛rdet f칬r variabeln `Age_fighters` ovan.

```{r}
# Write your code here
```

::: callout-tip
Medelv칛rdet ges av formeln: \begin{align}
\nonumber \overline{y}= \frac{1}{n} \sum_{i=1}^n y_i
\end{align}
:::

#### 游눩 Uppgift 6.9

Anv칛nd en `for`-loop f칬r att r칛kna ut medelv칛rdet f칬r variabeln `Age_fighters`.

```{r}
# Write your code here
```
