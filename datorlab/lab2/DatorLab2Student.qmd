---
title: "Statistik och dataanalys I, 15 hp "
subtitle: "Datorlaboration 2"
author: 
  - Byt ut mot namnet p친 student 1
  - Byt ut mot namnet p친 student 2
  - Byt ut mot namnet p친 student 3
date: last-modified
format: 
  html:
    self-contained: true
toc: true
execute:
  error: false
language: 
  title-block-author-single: " "
toc-title-document: "Inneh친ll"
crossref-fig-title: "Figur"
theme: Superhero
editor: visual
---

## Introduktion

> I den h칛r datorlabben kommer vi att titta p친 hur f칬rdelningar f칬r olika typer av variabler kan beskrivas numeriskt och grafiskt.

#### 游눩 Uppgift 0.3

L칛gg till en ny code chunk och st칛ll in 'working directory' till den nya mappen genom att f칬lja anvisningarna fr친n [Lab 1](https://statisticssu.github.io/SDA1/datorlab/lab1/DatorLab1.html#st%C3%A4lla-in-arbetsmappen-working-directory-i-r).

```{r}
# Fyll i l칬sning f칬r Uppgift 0.3 h칛r
```


## 1. Skapa tabeller f칬r kategoriska variabler

Installerar n친gra paket som ska anv칛ndas f칬r laborationen.
```{r}
install.packages("openxlsx") # Kommentera bort denna rad om redan har openxlsx installerat fr친n Lab 1
install.packages("mosaic") # Kommentera bort denna rad efter att du k칬rt Quarto-filen f칬rsta g친ngen
suppressMessages(library(openxlsx))
suppressMessages(library(mosaic))
```

Vi l칛ser in datamaterialet direkt fr친n webben:
```{r}
titanic = read.xlsx("https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab2/Chapter_3.xlsx", sheet = "Titanic")
```

#### 游눩 Uppgift 1.1

츿ndra koden ovan s친 `read.xlsx()` ist칛llet l칛ser in filen 'Chapter_3.xlsx' fr친n din dator.


Vi skriver ut det f칬rsta observationerna i datamaterialet f칬r att se att allt ser ok ut:
```{r}
head(titanic)
str(titanic)
```

Variabeln `Survived` i datasetet 칛r en kategorisk variabel med tv친 kategorier `Dead` och `Alive`. N칛r en variabel bara har tv친 kategorier brukar man ocks친 s칛ga **bin칛r variabel**. Man kan r칛kna antalet observationer som tillfaller varje kategori och p친 s친 s칛tt skapa en frekvenstabell med funktionen `tally()` i `mosaic`-paketet enligt nedan.

```{r}
tab_survived <- tally(~ Survived, data = titanic)
tab_survived
```

Genom att l칛gga till argumentet `format = proportion` i `tally()` r칛knas de relativa frekvenserna ist칛llet.

```{r}
tally(~ Survived, data = titanic, format = "proportion")
```

Vill man ha detta presenterat i procent kan man enkelt skriva `format = percent` ist칛llet f칬r `proportion`

```{r}
tally(~ Survived, data = titanic, format = "percent")
```

Allts친 칬verlevde endast 32.2% av de som befann sig p친 Titanic, medan 67.8% dog.


#### 游눩 Uppgift 1.1

Variabeln `Class` talar om biljettklass passageraren reste med (1:a, 2:a, 3:e eller Crew (bes칛ttning)). Presentera det totala antalet inom varje biljettklass. Vilken kategori 칛r st칬rst?

```{r}
# Write your code here
```

#### 游눩 Uppgift 1.2

Ber칛kna den relativa frekvensen (i procent) inom varje biljettklass.

```{r}
# Write your code here
```

## 2. Grafisk illustration av kategoriska variabler

Ett enkel pajdiagram f친s genom koden:
```{r}

table_rel_freq = tally(~ Survived, data = titanic, format = "proportion")
pie(x = table_rel_freq)
```


Och h칛r 칛r en lite mer informativt diagram:
```{r}
rel_frequencies = round(table_rel_freq, 2) # round the numbers to two decimals
rel_frequencies
category_names = names(table_rel_freq)
category_names
colors = c("lightblue", "purple")
pie(x =  table_rel_freq, labels = rel_frequencies, col = colors)
legend("topright", legend = category_names, fill = colors)

```

#### 游눩 Uppgift 2.1

Skapa ett pajdiagram av variabeln `Class` i titanic. Anv칛nd dig g칛rna av utr칛kningarna fr친n Uppgift 1.2 f칬r att skapa grafen. V칛lj sj칛lv om du vill illustrera det som andelar eller i procent.

```{r}
# Write your code here
```

#### 游눩 Uppgift 2.2

Vad 칛r det f칬r fel p친 denna graf?
```{r}

rel_frequencies = c(0.1, 0.9)
category_names = names(table_rel_freq)
colors = c("lightblue", "purple")
pie(x =  table_rel_freq, labels = rel_frequencies, col = colors)
legend("topright", legend = category_names, fill = colors)

```


```{r}
bargraph(~ Survived, data = titanic, type = "proportion")
```


```{r}
#| label: fig-andelar
#| fig-cap: "Relative frequency of Survival on the Titanic"
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.80)
colors = c("lightblue", "purple")

bargraph(~ Survived, data = titanic, type = "proportion", 
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```


#### 游눩 Uppgift 2.3

Justera diagrammet nedan s친 att det ser mer presentabelt ut. Byt ocks친 ut f칛rgerna mot tv친 andra bland [R's standardf칛rger](https://r-graph-gallery.com/42-colors-names.html).

```{r}
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.1)

bargraph(~ Survived, data = titanic, type = "proportion",  
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```

#### 游눩 Uppgift 2.4

R칛tta till felet i f칬ljande diagram:

```{r}
x_axis_title = "Survival"
y_axis_title = "Frequency"

bargraph(~ Survived, data = titanic, type = "count", 
         xlab = x_axis_title, ylab = y_axis_title, col = colors)

```

#### 游눩 Uppgift 2.5

Skapa ett stapeldiagram med funktionen `bargraph()` f칬r variabeln `Class` i titanic. Anv칛nd relativa frekvenser denna g친ng.

```{r}
# Write your code here
```

## 3. Dataset som best친r av saknade v칛rden

Vi tar bort saknade v칛rde i variabeln Age:
```{r}

length(titanic$Age) # number of observations originally
Age = na.omit(titanic$Age)
length(Age) # the number of observations when missing values are removed

```

#### 游눩 Uppgift 3.1

Definiera en ny variabel `Paid` fr친n kolumnen `Paid` i datasetet `titanic` p친 liknande s칛tt som ovan. Rensa bort eventuella saknade v칛rden med funktionen `na.omit()`.

```{r}
# Write your code here
```

## 4. Grafisk presentation av numeriska variabler

H칛r 칛r ett exempel med funktionen `histogram()`:
```{r}
#| label: fig-hist
#| fig-cap: "Distribution of Age onboard the Titanic"
histogram(~ Age, data = titanic, col = "navyblue")
```

Och h칛r med density
```{r}
#| label: fig-density
#| fig-cap: "Distribution of Age onboard the Titanic"
densityplot(~ Age, data = titanic, col = "navyblue")
```


#### 游눩 Uppgift 4.1

Rita ett histogram likt ovan, med samma variabel men med en annan f칛rg. Testa dig fram med `breaks` argumentet tills du hittar vad du tycker 칛r ett passande antal staplar. Rita sedan ett till likadant histogram men anv칛nd dig av Sturges regel denna g친ng f칬r att best칛mma hur m친nga staplar som ska anv칛ndas. Ser histogrammet b칛ttre ut 칛n det du ritade utan Sturges regel?
```{r}
# Write your code here
```

#### 游눩 Uppgift 4.2

Rita ett histogram 칬ver variabeln `Paid`.

```{r}
# Write your code here
```

#### 游눩 Uppgift 4.3

Vilket m친tt av medelv칛rdet eller medianen beskriver centralpunkten i f칬rdelningen f칬r `Paid` b칛st?

#### 游눩 Uppgift 4.4

Rita t칛thetsplottar f칬r variablerna `Age` och `Paid`.

```{r}
# Write your code here
```


I det f칬rsta argumentet i funktionen `barplot()` l칛gger vi in frekvenserna som nyss r칛knades ut. Det andra argumentet `names.arg` 칛r till f칬r att namnge de olika 친ldersintervallen ovan, p친 x-axeln. Argumentet `las = 3` g칬r endast s친 att texten p친 x-axeln blir lodr칛t.

```{r}

Age_Intervals = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", 
              "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69",
              "70-74")

barplot(frequencies, names.arg = Age_Intervals, las = 3,
        main = "Frequency of Age onboard the Titanic")
```

Histogrammet som skapades innan g친r allts친 i princip att g칬ra om till ett stapeldiagram, d칛r h칬jden p친 stapeln illustrerar hur m친nga observationer det 칛r som tillfaller varje 친lderskategori.
:::

## 5. Numerisk beskrivning av kvantitiva variabler

Om man anv칛nder sig av en frekvenstabell f칬r en numerisk variabel riskerar man i v칛rsta fall att f친 en tabell som 칛r lika l친ng som antal observationer man har. Kanske har man inte ens ett enda fall d칛r tv친 olika observationer har samma v칛rden. D칛rf칬r anv칛nds ofta andra beskrivande m친tt. Bland de viktigaste 칛r **l칛gesm친tten** som f친ngar f칬rdelningens mittpunkt

-   medelv칛rde
-   median

och spridningsm친tten som m칛ter variationen kring f칬rdelningens mittpunkt:

-   varians
-   standardavvikelse
-   variationsbredd (`range` p친 engelska: skillnaden mellan maximum och minimumv칛rdet)
-   Interkvartila avst친ndet (IQR).

Funktionen `favstats()` i `mosaic`-paketet ber칛knar dessa m친tt:

```{r}
favstats(~ Age, data = titanic)
```

Funktionen r칛knar ut olika f칬rdelningsm친tt, s친som minimumv칛rdet, maximumv칛rdet, f칬rsta och tredje kvartilen samt medelv칛rdet och medianen. B친de medelv칛rdet och medianen 칛r m친tt p친 en f칬rdelnings mittpunkt men hur l칛mpliga de 칛r som m친tt beror p친 f칬rdelningens utseende. Vi ser 칛ven att funktionen ocks친 skriver ut hur m친nga v칛rden datasetet best친r av och antalet saknade v칛rden.

Ibland vill man dock inte skriva ut all denna information f칬r en variabel. I Datorlaboration 1 anv칛nde vi oss av funktionen `mean()` f칬r att r칛kna ut medelv칛rdet av en variabel. N친gra andra vanliga funktioner ut칬ver dessa 칛r `var()` och `sd()`. Matematiskt motvaras dessa tre funktioner av: \begin{align}\nonumber
\overline{y}= \frac{1}{n} \sum_{i=1}^n y_i \\ \nonumber
s^2 =\frac{\sum_{i=1}^n(y_i-\overline{y})^2}{n-1}
\end{align} och \begin{align}
s = \sqrt{s^2}
\end{align}

#### 游눩 Uppgift 5.1

Anv칛nd funktionerna ovan f칬r att r칛kna ut medelv칛rdet, variansen och standardavvikelsen f칬r variabeln `Age`. Kan man r칛kna ut standardavvikelsen p친 n친got annat s칛tt i R?

```{r}
# Write your code here
```

#### 游눩 Uppgift 5.2

R칛kna ut det variationsbredden samt det interkvartila avst친ndet av variabeln `Age` fr친n utskriften vi fick fr친n funktionen `favstats()`.

```{r}
# Write your code here
```

## 6. Indexering och upprepning (loopar)

L친t oss titta p친 ett dataset 칬ver UFC's top 10 kampsportsut칬vare i Welterweight klassen bland m칛n (december 2022). Nedan matas v칛rdena in i vektorer och sedan s칛tts alla variabler ihop i en och samma tabell med funktionen `data.frame()`:

```{r}
# Defining variables:
Name = c("Kamaru Usman", "Colby Covington", "Khamzat Chimaev", "Belal Muhammed",
         "Gilbert Burns","Stephen Thompson", "Geoff Neal", "Sean Brady", 
         "Vicente Luque", "Shavkat Rakhmanov" )
Rank = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
Wins_by_knockout = c(9, 4, 6, 5, 6, 8, 9, 3, 11, 8)
Takedown_avg = c(3.01, 4.05, 3.98, 2.19, 2, 0.27, 0.59, 2.8, 0.51, 2.31)
Age_fighters = c(35,34,27, 34, 35, 39, 31, 29, 30, 27)

# Creating a dataframe with all the variables just defined above:
UFC = data.frame(Name, Rank, Wins_by_knockout, Takedown_avg, Age_fighters)
UFC

```

Datasetet best친r av fem stycken variabler och 칛r sorterat efter `Rank`. I Lab 1 tittade vi lite p친 **indexering** och detta bygger vidare p친 det. L친t s칛ga att vi vill veta vad 친ldern 칛r f칬r den 6:e rankade ut칬varen. I detta fall 칛r datasetet v칛ldigt litet och man kan genast identifiera alla individer. Ibland har vi dataset som 칛r v칛ldigt stora och d친 kan man beh칬va anv칛nda sig av indexering f칬r att f친 ut information om en enskild (eller ett f친tal) observationer av intresse. F칬r att ta reda p친 친ldern p친 den 6:e rankade ut칬varen kan man d친 anv칛nda sig av koden `UFC[6, 5]`. D칛r siffran till v칛nster om kommatecknet i hakparantesen anger radtalet och siffran till h칬ger om kommatecknet anger kolumntalet. Detta ger oss svaret 39.

#### 游눩 Uppgift 6.1

Anv칛nd indexering f칬r att skriva ut hur m친nga wins by knockout Gilbert Burns har haft.

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.2

Anv칛nd indexering f칬r att skriva ut all information om Kamaru Usman (dvs den f칬rsta raden). \[Ledtr친d: om man inte skriver n친got alls efter kommatecknet i indexeringen f친r man *alla* v칛rden i den raden\]

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.3

Anv칛nd indexering f칬r att skriva ut alla v칛rden f칬r variabeln `Takedown_avg` (dvs den 4:e kolumnen).

```{r}
# Write your code here
```

En **loop** kan v칛ldigt kort beskrivas som en procedur som 친terupprepas s친 l칛nge ett visst f칬rh친llande 칛r uppfyllt. Det finns tre vanliga loopar i R. Dessa 칛r `for`-loop, `while`-loop och `repeat`-loop. De tv친 f칬rsta 칛r de vanligaste men vi kommer 칛n s친 l칛nge bara titta p친 `for`-loopen.

S칛g att du vill skriva en kod som skriver ut alla tal mellan 1 och 10 p친 sk칛rmen. Du skulle kunna skriva print(1) f칬ljt av print(2) osv, men skulle vara jobbigt. Kan vi f친 datorn att g칬ra det jobbet 친t oss genom att anv칛nda en `for`-loop? Svar ja. Nedan ges ett exempel p친 en loop som skriver ut talen mellan 1-10 med hj칛lp av `print()` funktionen. Det 칛r ett exempel p친 den kanske mest grundl칛ggande loopen, men den illustrerar 칛nd친 en viktig princip. F칬r att starta loopen anv칛nds ordet `for` f칬ljt av en parentes. Vad som st친r inom parentesen 칛r v칛ldigt viktigt och det f칬rsta argumentet 칛r namnet p친 en s친 kallad indexvariabel, i detta fall `i`. Efter detta specificerar man fr친n vilken siffra `i` b칬rjar p친 samt vilken siffra `i` slutar p친. H칛r b칬rjar den p친 1 och slutar p친 10. Efter parentesen bildar man en ny s친 kallad klammerparentes (som ser ut som m친svingar). D칛r inne specificerar man allt som ska h칛nda i varje upprepningen i loopen. I det h칛r exemplet vill vi att loopen ska skriva ut indexnumret, ett i taget:

```{r}
for (i in 1:10){
  print(i)
}

```

Allts친 skriver loopen ut vad `i` 칛r under varje *iteration* (dvs upprepning).

#### 游눩 Uppgift 6.4

Anv칛nd loopen ovan men byt ut indexvariabeln `i` till `k` ist칛llet. K칬r sedan loopen. Vad 칛r det som h칛nder?

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.5

Anv칛nd 친terigen loopen i exemplet ovan. Men 칛ndra variabeln `i`s definitionsm칛ngd fr친n 1:10 till 24:33.

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.6

G칬r p친 samma vis som i 칬vningen ovan men 칛ndra nu definitionsm칛ngden fr친n 1:10 till -3:5

```{r}
# Write your code here
```

Nedan ges ett exempel p친 en `for`-loop som skriver ut namnet p친 en enskild variabel (`Name`) i tur och ordning. H칛r anv칛nds indexering av variabeln `Name` f칬r att endast ett namn ska skrivas ut i varje iteration, och d친 i samma ordning som den f칬rekommer i variabeln.

```{r}

for(i in 1:10){
  print(Name[i])
}

```

::: callout-note
H칛r anv칛ndes endast en variabel `Name` (som faktiskt definierades innan dataframen `UFC`). D칛rf칬r anv칛nds inte n친got kommatecken inuti hakparantesen. Det beror allts친 p친 att det h칛r 칛r en enskild definierad variabel utanf칬r dataframen `UFC`.
:::

#### 游눩 Uppgift 6.7

Anv칛nd en `for`-loop f칬r att skriva ut varje v칛rde p친 variabeln `Wins_by_knockout`.

```{r}
# Write your code here
```

Den introduktionen till loopar kan r칛cka f칬r tillf칛llet. Men om du tyckte det var intressant kan du forts칛tta l칛sa lite mer om loopar nedan. Annars kan du hoppas till [Sammanfattningen av Lab 2](#sammanfattning).

Man kan 칛ven g칬ra matematiska utr칛kningar med hj칛lp av en loop. L친t s칛ga att vi vill r칛kna ut vad $2^6$ 칛r (d칛r 2 칛r basen och 6 칛r exponenten). Detta kan enkelt g칬ras med den matematiska operationen `^` i R vilket ger oss resultatet 64. Men eftersom vi 칛lskar att loopa s친 kommer vi ocks친 칛lska f칬ljande exempel d칛r vi r칛knar ut detta v칛rde f칬r hand med en loop.

F칬rst m친ste man definiera ett startv칛rde. Detta g칬rs med variabeln `myProduct` nedan. Eftersom utr칛kningen av $2^6 = 2\cdot 2\cdot 2\cdot 2\cdot 2\cdot 2 = 64$ egentligen bara 칛r multiplikation, m친ste startv칛rdet vara like med 1 (anv칛nds 0 kommer slutresultatet ocks친 att bli 0). D칛refter kan loopen startas. Den kommer att iterera fr친n v칛rdet 1 till 6 (eftersom exponenten 칛r 6). Efter f칬rsta iterationen (loop-omg친ngen) kommer `myProduct` att vara 1 multiplicerat med 2, dvs 2. Detta v칛rde sparas i `myProduct` och syns n칛r man skriver ut resultatet med `print(myProduct)` inuti loopen. I den andra iterationen multipliceras `myProduct` med 2 igen, och detta v칛rde sparas nu i `myProduct`. Resultatet 칛r $2\cdot2=4$. Den tredje iterationen multipliceras 4 med 2 och `myProduct` uppdateras till detta nya v칛rde 8. Denna procedur upprepas tills antal iterationer `i` har n친tt upp till 6 g친nger. D칛refter avslutas loopen och `myProduct` visar d친 svaret p친 vad $2^6$ 칛r:

```{r}

myProduct = 1 # We have to start with 1 here since it's multiplication

for (i in 1:6){
  myProduct = myProduct * 2  # multiplying with 2 in each iteration
  print(myProduct) # prints the result after each iteration
}
myProduct # final result


```

#### 游눩 Uppgift 6.8

Funktionen `sum()` i R kan anv칛ndas f칬r att summera numeriska v칛rden i en vektor. Anv칛nd denna funktion f칬r att r칛kna ut medelv칛rdet f칬r variabeln `Age_fighters` ovan.

```{r}
# Write your code here
```

::: callout-tip
Medelv칛rdet ges av formeln: \begin{align}
\nonumber \overline{y}= \frac{1}{n} \sum_{i=1}^n y_i
\end{align}
:::

#### 游눩 Uppgift 6.9

Anv칛nd en `for`-loop f칬r att r칛kna ut medelv칛rdet f칬r variabeln `Age_fighters`.

```{r}
# Write your code here
```

::: callout-tip
Skapa ett startv칛rde f칬r summan och s칛tt detta v칛rde till 0. Sedan inuti loopen m친ste du ocks친 anv칛nda dig av indexering f칬r att s칛ga till R vilket v칛rde i denna variabel du vill addera till din befintliga summa.
:::

## 7. Sammanfattning {#sammanfattning}

::: callout-info
## I den h칛r laborationen har du l칛rt dig:

-   Metoder f칬r att presentera en variabels f칬rdelning och att man anv칛nder olika metoder beroende p친 om en variabel 칛r numerisk eller kategorisk.

-   Hur man praktiskt kan presentera kategoriska variabler i tabellform samt illustrera dem grafiskt med paj- och stapeldiagram.

-   Hur man kan rita ett histogram och en t칛thetsplot.

-   Kopplingen mellan histogram och stapeldiagram.

-   Vilka beskrivande m친tt man kan anv칛nda sig av f칬r numeriska variabler.

-   N친gra exempel p친 vad en `for`-loop kan anv칛ndas till.
:::

## A. Appendix

Lista 칬ver n친gra vanliga argument i grafer

-   col = f칛rg, kan markeras med siffror eller med namnet p친 f칛rgen, oftast med sm친 bokst칛ver. Gl칬m ej att texten m친ste ligga inom citattecken.

-   main = rubrik p친 plotten, detta s칛tts till en textstr칛ng, allts친 en text inom citattecken.

-   xlab = rubrik p친 x-axeln, detta s칛tts till en textstr칛ng, allts친 en text inom citattecken.

-   ylab = rubrik p친 y-axeln, detta s칛tts till en textstr칛ng, allts친 en text inom citattecken.

-   xlim = definitionsomr친de f칬r x-axeln. Exempelvis betyder xlim = c(0, 14.3) att det l칛gsta v칛rdet som ritas kommer att vara 0 och det h칬gsta v칛rdet kommer att vara 14.3 (p친 x-axeln).

-   ylim = definitionsomr친de f칬r y-axeln. Exempelvis betyder ylim = c(-2, 20.7) att det l칛gsta v칛rdet som ritas kommer att vara -2 och det h칬gsta v칛rdet kommer att vara 20.7 (p친 y-axeln).

-   lwd = tjocklecken p친 linjer (eller prickar) i ett linjediagram (spridningsdiagram), anges med ett nummer.

-   lty = typ av linje (rak, streckad, prickad etc) i ett linjediagram, anges med ett nummer.

-   pch = typ av prick (rund, fyrkantig + \* etc), s칛tts till ett nummer.

-   breaks = antal staplar i ett histogram.

-   cex = justering av etiketternas storlek i en figur (exempelvis cex = 0.5 i en `legend()` funktion minskar storleken som "legend-texten" tar upp i en figur med h칛lften). Finns 칛ven exempelvis cex.axis, cex.main f칬r att justera storleken av texter p친 axlar respektive rubrik.

-   bg = bakgrundsf칛rg i en figur.

-   col.main = rubrikens f칛rg.

-   col.lab = f칛rger f칬r rubrikerna p친 axlarna.

-   font = specificerar vilken typ av text man vill ha, exempelvis ger font = 3 kursiv text.
