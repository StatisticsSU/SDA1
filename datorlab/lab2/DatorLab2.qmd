---
title: "Statistik och dataanalys I, 15 hp "
subtitle: "Datorlaboration 2"
author: 
  - Mona Sfaxi
  - Matias Quiroz
  - Mattias Villani (redigering)
date: last-modified
format: 
  html:
    self-contained: true
toc: true
execute:
  error: false
language: 
  title-block-author-single: " "
toc-title-document: "Inneh친ll"
crossref-fig-title: "Figur"
theme: Superhero
title-block-banner-color: Primary
title-block-published: "Publicerad"
callout-warning-caption: "Varning"
callout-note-caption: "Observera"
callout-tip-caption: "Tips"
editor: visual
---

## Introduktion

> I den h칛r datorlabben kommer vi att titta p친 hur f칬rdelningar f칬r olika typer av variabler kan beskrivas numeriskt och grafiskt.

#### 游눩 Uppgift 0.1

Skapa en mapp `Lab2` i din kursmapp SDA1 (fr친n Lab 1). Ladda ner Quarto-filen f칬r denna lab genom att h칬gerklicka [h칛r](https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab2/DatorLab2.qmd) och v칛lj 'Spara l칛nk' eller n친got likande fr친n menyn som dyker upp. Spara filen i din nya `Lab2` mapp. 칐ppna Quarto-filen i RStudio och g친 칬ver till 'Source mode' genom att klicka p친 'Source' i det v칛nstra h칬rnet av din 'Editor'. Du kan nu forts칛tta med denna laboration direkt i Quarto-dokumentet, d칛r du ocks친 fyller i svaren p친 dina laborations칬vningar. Du kan allts친 l칛mna den h칛r webbsidan nu och forts칛tta arbetet i RStudio.

#### 游눩 Uppgift 0.2

Klicka p친 knappen Render i Editor-f칬nstret f칬r att **kompilera** filen till en webbsida (html). Webbsidan kommer antingen att visas i Viewer-f칬nstret i RStudio eller i webbl칛saren p친 din dator. Om din webbsida visas i webbl칛saren rekommenderar vi att du 칛ndrar inst칛llningarna i RStudio s친 webbsidan visas i Viewer-f칬nstret. Du st칛ller in detta p친 menyn [T]{.underline}ools/[G]{.underline}lobal Options... och sen v칛ljer du *Viewer Pane* vid *Show output preview in*:

![](https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab2/QuartoInViewerPane.png){fig-align="center" width="333"}

#### 游눩 Uppgift 0.3

F칬r att s칛kerst칛lla att man befinner sig i korrekt arbetsmapp varje g친ng Quarto-dokumentet kompileras kan man skapa en s k code-chunk efter den s k YAML-texten (som 친terfinns l칛ngst upp i dokumentet, mellan de tre bindestrecken - - -). Du skapar en code-chunk genom att klicka p친 knappen med C och ett + i 칬vre h칬gra h칬rnet av Editorn.

![](https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab2/codechunk.png){fig-align="center" width="200" height="26"}

::: callout-note
### RStudios Editor 칛ndras beroende p친 vilken sorts fil du har 칬ppen

Notera att ikonerna i Editor 칛r annorlunda n칛r du har ett Quarto-dokument 칬ppet j칛mf칬rt med tidigare n칛r vi hade en fil med ren R-kod 칬ppen.
:::

L칛gg till en ny code chunk och st칛ll in 'working directory' till den nya mappen genom att f칬lja anvisningarna fr친n [Lab 1](https://statisticssu.github.io/SDA1/datorlab/lab1/DatorLab1.html#st%C3%A4lla-in-arbetsmappen-working-directory-i-r).

::: callout-tip
Funktionen `setwd()` i R talar om f칬r R vilken mapp som 칛r 'working directory'.
:::

#### 游눩 Uppgift 0.4

M친nga intressanta dataset finns tillg칛ngliga p친 webben. Kursboken har gjort ca 500 av dataseten tillg칛ngliga [h칛r](https://media.pearsoncmg.com/intl/ge/2021/cws/ge_deveaux_stats_5/statdm5d_datasets.html). Ni kommer att jobba med `titanic` datasetet som finns i Chapter 3. Ladda ner den zip-filen samt packa upp/extrahera filen genom att klicka p친 den och v칛lj 'Extrahera' eller n친got liknande. Du kan extrahera filerna p친 datorns Skrivbord eller annan mapp. Om du g친r in i den extraherade mappen `Ch3` s친 finns d칛r filen `Chapter_3.xlsx`. Kopiera den filen till din `Lab2` mapp. Vi kommer snart att l칛sa in datasetet.

## 1. Skapa tabeller f칬r kategoriska variabler

En **kategorisk variabel** 칛r en variabel vars utfall 칛r kategorier. En kategorisk variabel kan antingen vara p친 **nominalskala** eller **ordinalskala**. Den vanligaste typen 칛r nominalskala, vilket inneb칛r att utfallen saknar en naturlig rangordning. Ett exempel 칛r k칬n, d칛r man inte kan rangordna utfallen p친 ett meningsfullt s칛tt. F칬r en kategorisk variabel p친 ordinalskala s친 g칛ller det att utfallen har en naturlig rangordning. Ett exempel 칛r betyg, d칛r till exempel betyg A 칛r b칛ttre 칛n betyg C. 츿n s친 l칛nge beh칬ver vi inte oroa oss f칬r om en kategorisk variabel 칛r p친 ordinalskala eller nominalskala. Vi anv칛nder en tabell f칬r att representera dess f칬rdelning i b칛gge fallen.

F칬rst ska vi installera och ladda paketen `openxlsx` f칬r att l칛sa in data fr친n Excelfil och `mosaic` f칬r dataanalys.

```{r}
#install.packages("openxlsx") # Kommentera bort denna rad om redan har openxlsx installerat fr친n Lab 1
#install.packages("mosaic") # Kommentera bort denna rad efter att du k칬rt Quarto-filen f칬rsta g친ngen
suppressMessages(library(openxlsx))
suppressMessages(library(mosaic))
```

::: callout-tip
## Snyggare utskrifter genom att undvika paket-meddelanden

M친nga paket 칛r 'pratiga' och skriver ut en massa meddelanden n칛r man laddar in dem med `library`. Genom att skriva `suppressMessages(library(openxlsx))` slipper vi f친 en massa meddelanden utskrivna i v친r rapport.
:::

Vi kan nu l칛sa in datamaterialet som finns i fliken `Titanic` i den Excelfil `Chapter_3.xls` ni laddade ner ovan:

```{r}
titanic = read.xlsx("https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab2/Chapter_3.xlsx", sheet = "Titanic")
```

::: callout-note
## Funktionen read.xlsx() 칛r smart

Om du tittar p친 koden ovan ser du att det ser lite annorlunda ut 칛n i Lab 1:

-   Funktionen `read.xlsx()` kan l칛sa in filer inte bara fr친n din dator utan direkt fr친n internet. Ist칛llet f칬r att ange en s칬kv칛g till Excel-filen p친 din dator (om den inte ligger i working directory) kan du bara ange en webbadress d칛r data finns. Vi har laddat upp data till adressen ovan.

-   Funktionen `read.xlsx()` har ett argument `sheet` som talar om vilken av alla flikar som ska l칛sas in. I [Lab 1](https://statisticssu.github.io/SDA1/datorlab/lab1/DatorLab1.html#l%C3%A4sa-in-data-fr%C3%A5n-fil) satte vi `sheet = 1` f칬r att l칛sas in den f칬rsta fliken. Men man kan ocks친 skriva namnet p친 fliken, dvs `sheet = "Titanic"`. Notera att eftersom Titanic 칛r ett namn s친 m친ste vi skriva citationtecken "" kring f칬r att tala om f칬r R att det 칛r bokst칛ver (en **str칛ng** som vi l칛rde oss om i Lab 1).
:::

#### 游눩 Uppgift 1.1

츿ndra koden ovan s친 `read.xlsx()` ist칛llet l칛ser in filen 'Chapter_3.xlsx' fr친n din dator.

Vi kan ta titt p친 de f칬rsta observationerna genom att anv칛nda funktionen `head()`. Vi kan ocks친 lista de f칬rsta observationerna f칬r varje variabel i datasetet genom att anv칛nda funktionen `str()`:

```{r}
head(titanic)
str(titanic)
```

Verkar variablerna vara definierade som de ska?

L친t oss unders칬ka variabeln `Survived` i datasetet. Detta 칛r en kategorisk variabel med tv친 kategorier `Dead` och `Alive`. N칛r en variabel bara har tv친 kategorier brukar man ocks친 s칛ga **bin칛r variabel**. Man kan r칛kna antalet observationer som tillfaller varje kategori och p친 s친 s칛tt skapa en frekvenstabell med funktionen `tally()` i `mosaic`-paketet enligt nedan.

```{r}

tally(~ Survived, data = titanic)

```

Tilde-tecknet `~` anv칛nds i `mosaic`-paketet och 칛r en del av formula-syntax dialekten i R som omn칛mndes i [Lab 1](https://statisticssu.github.io/SDA1/datorlab/lab1/DatorLab1.html#tre-dialekter-av-r). I det h칛r fallet talar tecknet `~` om f칬r R att variabeln `Survived` ska h칛mtas fr친n datamaterialet titanic. Annars skulle vi ju vara tvungna att skriva titanic\$Survived (kom ih친g fr친n Lab 1 att \$-tecknet s칛ger 친t R att 'plocka ut variabeln Survived fr친n datamaterialet titanic'). S친 blir man t ex tvungen att skriva i dialekten base-R (klicka i marginalen om du 칛r intresserad). F칬rdelen med mosaic's formula-syntax kommer bli 칛nnu tydligare n칛r vi har m친nga fler variabler att jobba med.

::: column-margin
[![](https://github.com/StatisticsSU/SDA1/raw/main/misc/hexagons/figs/base_r_hexagon.svg){width="60"}](../../R/BaseRSyntax.qmd#tabeller) [![](https://github.com/StatisticsSU/SDA1/raw/main/misc/hexagons/figs/tidyverse_hexagon.svg){width="60" height="150"}](../../R/TidyverseSyntax.qmd#tabeller)
:::

L칛gg m칛rke till att frekvenstabellen inte 칛r sparad. Detta 칛r bara ett kommando som ofta ocks친 duger gott och v칛l. Men ibland vill man ocks친 spara en tabell under sin session. Det kan g칬ras genom att skapa ett passande variabelnamn och tilldela den nya variabeln v칛rdet vi fick ovan (namnet p친 variabeln kan man v칛lja som man vill):

```{r}
tab_survived <- tally(~ Survived, data = titanic)
```

::: callout-note
Tabellen 칛r nu sparad (i R's arbetsminne, men inte p친 datorns h친rddisk) och syns ocks친 i Environment fliken l칛ngst upp till h칬ger. Men vill man skriva ut resultatet i sitt dokument m친ste man ocks친 skriva ut den nya tabellens namn i sin code-chunk likt nedan

```{r}
tab_survived
```

men det 칛r vanligare att skriva allt i samma code-chunk:

```{r}
tab_survived <- tally(~ Survived, data = titanic)
tab_survived
```
:::

Ibland kan det vara sv친rt att titta p친 antalet inom varje kategori och j칛mf칬ra siffrorna sinsemellan. Att titta p친 relativa frekvenser ist칛llet g칬r ofta j칛mf칬relserna mycket enklare att uppfatta. Genom att l칛gga till argumentet `format = proportion` i `tally()` r칛knas de relativa frekvenserna ist칛llet.

```{r}
tally(~ Survived, data = titanic, format = "proportion")
```

Vill man ha detta presenterat i procent kan man enkelt skriva `format = percent` ist칛llet f칬r `proportion`

```{r}
tally(~ Survived, data = titanic, format = "percent")
```

Allts친 칬verlevde endast 32.2% av de som befann sig p친 Titanic, medan 67.8% dog.

::: callout-note
`tab_survived` 칛r inte en vanlig numerisk variabel. Man kan anv칛nder sig av funktionen `class()` f칬r att ta reda p친 vilken typ av objekt den 칛r sparad som:

```{r}
class(tab_survived)
```
:::

#### 游눩 Uppgift 1.1

Variabeln `Class` talar om biljettklass passageraren reste med (1:a, 2:a, 3:e eller Crew (bes칛ttning)). Presentera det totala antalet inom varje biljettklass. Vilken kategori 칛r st칬rst?

```{r}
# Write your code here
```

#### 游눩 Uppgift 1.2

Ber칛kna den relativa frekvensen (i procent) inom varje biljettklass.

```{r}
# Write your code here
```

## 2. Grafisk illustration av kategoriska variabler

F칬r att presentera kategoriska variabler grafiskt anv칛nds oftast pajdiagram (pie charts) eller stapeldiagram (bar charts). Oftast r칛cker det med att anv칛nda sig av ett av dessa diagram i sin presentation. I R kan man anv칛nda sig av funktionerna `pie()`och `bargraph()` f칬r respektive diagram. Det g친r d친 smidigt att anv칛nda sig av en sparad tabell som argument i funktionen.

```{r}

table_rel_freq = tally(~ Survived, data = titanic, format = "proportion")
pie(x = table_rel_freq)
```

Ovan ser vi att vi f칬rst har sparat de relativa frekvenserna bland de som 칬verlevde och de som dog i en tabell `table_rel_freq`. Detta 칛r inte n칬dv칛ndigt f칬r att skapa ett pajdiagram. Men eftersom siffrorna redan finns i tabellen s친 kan man lika g칛rna anv칛nda sig av dem. Ett annat alternativ hade varit att skapa en vektor och manuellt skriva in v칛rden f칬r de olika kategorierna exempelvis likt: `relative_frequencies = c(0.32, 0.68)`

Grafen ovan 칛r dock inte s친 informativ. Det finns generellt m친nga argument man kan anv칛nda sig av i R f칬r att g칬ra sina grafer s친 informativa som m칬jligt. Koden nedan 칛r ett exempel p친 hur man kan g친 tillv칛ga

```{r}
rel_frequencies = round(table_rel_freq, 2) # round the numbers to two decimals
rel_frequencies
category_names = names(table_rel_freq)
category_names
colors = c("lightblue", "purple")
pie(x =  table_rel_freq, labels = rel_frequencies, col = colors)
legend("topright", legend = category_names, fill = colors)

```

Funktionen `round()` anv칛nds f칬r att avrunda till 칬nskat antal decimaler, i detta fall tv친 s친 att grafen blir mer l칛ttl칛slig.

Funktionen `names()` som anv칛ndes i Datorlaboration 1 f칬r att f친 ut kolumnnamn fr친n dataframes kan 칛ven h칛r anv칛nds f칬r att f친 ut kolumnnamn fr친n tabeller. 칀terigen 칛r denna funktion inte n칬dv칛ndig f칬r att bilda ett pajdiagram, men den kan utnyttjas f칬r att ge passande etiketter f칬r olika kategorier.

::: callout-note
Ett alternativ 칛r att skriva ut namnen manuellt, exempelvis `category_names = c("Alive", "Dead")`. L칛gg d친 m칛rke till att ordningen spelar roll. Kom 칛ven d친 ih친g att anv칛nda citattecken " " i vektorn ovan f칬r att markera att det 칛r text! Skriver vi inte ut citattecken runt kategorinamnen kommer R tro att vi kallar p친 variablerna `Alive` och `Dead` som inte 칛r definierade, och Quarto dokumentet kan inte kompileras.
:::

Man kan 칛ven specificera f칛rgerna p친 pajbitarna. Det finns v칛ldigt m친nga f칛rger i R och man kan specificera dem antingen med text eller med siffror. Anv칛nder man sig av text 칛r stavningen viktig. Generellt anv칛nds d친 endast gemener (sm친 bokst칛ver).

I funktionen `pie()` l칛ggs de olika argumenten in f칬r att bilda ett pajdiagram. Det f칬rsta argumentet kommer att avg칬ra hur stora pajbitarna blir. Det andra argumentet markerar endast etiketterna bredvid varje pajbit (i detta fall hur stora andelar det finns i varje kategori) och det tredje argumentet `col` best칛mmer f칛rgen i sj칛lva grafen.

Nedanf칬r det anv칛nds 칛ven funktionen `legend()` som flitigt kan anv칛ndas d친 man vill rita flera olika variabler eller flera olika kategorier. Det f칬rsta argumentet s칛ger var man vill placera etiketterna f칬r de olika kategorierna (i detta fall h칬gst upp till h칬ger). Det andra argumentet s칛ger vilka namn man vill ha p친 dessa etiketter (`category_names` anv칛nds h칛r) och det tredje argumentet s칛ger till vilka f칛rger man vill ha. Det 칛r d친 viktigt att man anv칛nder sig av samma f칛rger som man anv칛nde sig av i `pie()` funktionen ovan och att f칛rgerna ocks친 kommer i samma ordning som ovan.

#### 游눩 Uppgift 2.1

Skapa ett pajdiagram av variabeln `Class` i titanic. Anv칛nd dig g칛rna av utr칛kningarna fr친n Uppgift 1.2 f칬r att skapa grafen. V칛lj sj칛lv om du vill illustrera det som andelar eller i procent.

```{r}
# Write your code here
```

#### 游눩 Uppgift 2.2

Vad 칛r det f칬r fel p친 denna graf?

```{r}

rel_frequencies = c(0.1, 0.9)
category_names = names(table_rel_freq)
colors = c("lightblue", "purple")
pie(x =  table_rel_freq, labels = rel_frequencies, col = colors)
legend("topright", legend = category_names, fill = colors)

```

Nedan syns ett exempel p친 hur man kan anv칛nda sig av stapeldiagram. Detta g칬rs enklast med funktionen `bargraph()`, som liknar `tally()` funktionen i och med att den b칬rjar med ett `~`tecken f칬ljt av variabeln som vi vill rita och sedan datasetet det kommer ifr친n. L칛gg dock m칛rke till att ist칛llet f칬r att skriva `format = proportion` skriver man `type = proportion` om man vill visa staplarna som relativa frekvenser.

::: callout-note
I det h칛r fallet kommer variabeln `Survived` fr친n en dataframe. Det 칛r oftast smidigare att arbeta med dataframes i `mosaic` paketet men inte alltid n칬dv칛ndigt. Funktionen hade ocks친 fungerat ifall man hade haft en enskild variabel som inte var i dataframe-format (se den utkommenterade raden i koden).
:::

```{r}
bargraph(~ Survived, data = titanic, type = "proportion")
# bargraph(~ titanic$Survived, type = "proportion") # without dataframe format
```

::: column-margin
::: column-margin
[![](https://github.com/StatisticsSU/SDA1/raw/main/misc/hexagons/figs/base_r_hexagon.svg){width="60"}](../../R/BaseRSyntax.qmd#tabeller) [![](https://github.com/StatisticsSU/SDA1/raw/main/misc/hexagons/figs/tidyverse_hexagon.svg){width="60" height="150"}](../../R/TidyverseSyntax.qmd#tabeller)
:::
:::

Men detta diagram s칛ger kanske inte allt om det vi tittar p친. I vilket sammanhang 칛r "Alive" och "Dead" tagit ifr친n? Det finns ingen rubrik! Man skulle kanske 칛ven vilja justera sin y-axel, antingen s친 att den blir lite kortare eller lite l칛ngre.

F칬rst kan man b칬rja med att skapa en rubrik f칬r sin graf. Detta g칬rs nedan genom att skapa en ny variabel `my_title` som 칛r en textstr칛ng. Sedan kan man 칛ven definiera passande namn f칬r b친de x-axeln och y-axeln, dessa 칛r ocks친 textstr칛ngar.

F칬r att justera l칛ngden p친 y-axeln kan man skapa en vektor med passande v칛rden. H칛r anv칛nds en vektor med namnet `length_y_axis` som b칬rjar p친 0 och slutar p친 0.75. Man kan 칛ven justera s친 att staplarna f친r valfria f칛rger.

Sedan kan man enkelt s칛tta in argumenten i `bargraph()` funktionen till dessa v칛rden:

```{r}
my_title = "Figur 1: Relative frequency of Survival on the Titanic"
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.80)
colors = c("lightblue", "purple")

bargraph(~ Survived, data = titanic, type = "proportion", main = my_title, 
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```

N칛r man skriver en Quarto-rapport 칛r det inte s친 bra att skriva in figur-numret i sj칛lva grafen, dvs Figur 1, som vi skrev ovan. Problemet med det 칛r att om man sen l칛gger in en graf mellan tv친 grafer s친 m친ste man g친 in och 칛ndra alla figurers numrering. Om vi sen 칛ven har h칛nvisat till en figur i texten (t ex, se Figur 1 f칬r en trevlig plott) s친 m친ste vi ocks친 칛ndra numret d칛r. Men vi kan l칬sa detta genom att l친ta Quarto h친lla koll p친 figurernas numrering. S친 h칛r:

```{r}
#| label: fig-andelar
#| fig-cap: "Relative frequency of Survival on the Titanic"
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.80)
colors = c("lightblue", "purple")

bargraph(~ Survived, data = titanic, type = "proportion", 
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```

Man kan n칛mligen ge lite extra kommandon i varje code-chunk genom att anv칛nda tecknet `#|` (uttalas hash-pipe, du kommer ih친g det genom denna [Weezer-video](https://youtu.be/RRQswKjgF0E)). I det h칛r fallet anv칛nde vi nyckelordet `label` f칬r att ge figuren namnet fig-andelar och nyckelordet fig-cap f칬r att ange texten till figuren. Notera att vi ocks친 tog bort argumentet `main = my_title` eftersom titel inte l칛ngre beh칬vs i sj칛lva grafen. Vi kan nu h칛nvisa till figuren i texten med hj칛lp av \@-tecknet (notera att du ocks친 kan klicka f칬r transportera dig till figuren!): Se @fig-andelar f칬r en trevlig plott.

#### 游눩 Uppgift 2.3

Justera diagrammet nedan s친 att det ser mer presentabelt ut. Byt ocks친 ut f칛rgerna mot tv친 andra bland [R's standardf칛rger](https://r-graph-gallery.com/42-colors-names.html).

```{r}
x_axis_title = "Survival"
y_axis_title = "Frequency"
length_y_axis = c(0, 0.1)

bargraph(~ Survived, data = titanic, type = "proportion",  
         xlab = x_axis_title, ylab = y_axis_title, ylim = length_y_axis, col = colors)

```

#### 游눩 Uppgift 2.4

R칛tta till felet i f칬ljande diagram:

```{r}
x_axis_title = "Survival"
y_axis_title = "Frequency"

bargraph(~ Survived, data = titanic, type = "count", 
         xlab = x_axis_title, ylab = y_axis_title, col = colors)

```

#### 游눩 Uppgift 2.5

Skapa ett stapeldiagram med funktionen `bargraph()` f칬r variabeln `Class` i titanic. Anv칛nd relativa frekvenser denna g친ng.

```{r}
# Write your code here
```

## 3. Dataset som best친r av saknade v칛rden

L친t oss titta n칛rmare p친 variabeln `Age` (친lder) i datasetet `titanic`. Denna variabel har en del saknade v칛rden och vissa standard-funktioner i R 칛r k칛nsliga f칬r s친dana. Man kan enkelt se om en variabel har saknade v칛rden genom att anv칛nda `summary()` funktionen, som r칛knar ute lite sammanfattningsm친tt (mer om det senare) f칬r variablerna i datamaterialet. R skriver NA (Not Available) eller (NaN) (Not A Number) f칬r saknade v칛rden, och vi kan se att variabeln `Age` har 3 st saknade v칛rden (`NA's :3`):

```{r}
summary(titanic)
```

Det finns olika s칛tt att hantera saknade v칛rden. M친nga funktioner kan hantera utr칛kningar f칬r variabler med saknade v칛rden om man specificerar det i funktionen. I detta fall 칛r vi bara intresserade av en variabel och inte hela datasetet s친 vi kommer att ta bort de observationer som har saknade v칛rden. Men i vanliga fall m친ste man t칛nka efter innan man tar bort s친dana observationer, speciellt om man tittar p친 flera variabler samtidigt. Det finns mer att s칛ga om att bara ta bort saknade v칛rden n칛r vi kommer till den statistiska analysen.

Funktionen `na.omit()` tar bort alla observationer som har `NA` eller `NaN`, dvs saknade v칛rden.

```{r}

length(titanic$Age) # number of observations originally
Age = na.omit(titanic$Age)
length(Age) # the number of observations when missing values are removed

```

#### 游눩 Uppgift 3.1

Definiera en ny variabel `Paid` fr친n kolumnen `Paid` i datasetet `titanic` p친 liknande s칛tt som ovan. Rensa bort eventuella saknade v칛rden med funktionen `na.omit()`.

```{r}
# Write your code here
```

## 4. Grafisk presentation av numeriska variabler

Numeriska variabler 칛r s친dana som naturligt best친r av numeriska v칛rden. Numeriska variabler kan ha olika [skaltyper](http://www.ollevejde.se/statistikord/datatyper.htm). Numeriska variabler inneh친ller rikare information 칛n kategoriska variabler, d칛r man kan f친 ut mer information b친de numeriskt och grafiskt. En numerisk variabel kan alltid kodas om till en kategorisk variabel (en variabel p친 en l칛gre skalniv친) men det omv칛nda g칛ller inte.

Att illustrera numeriska variabler grafiskt 칛r betydelsefullt f칬r att uppt칛cka ifall en f칬rdelning har avvikande v칛rden (s친 kallade **outliers**), eller om f칬rdelningen ser **symmetrisk** eller **skev** ut, men ocks친 f칬r att uppt칛cka om det 칛r en **unimodal** eller **multimodal** f칬rdelning. Vid de tv친 senare fallen 칛r histogram och t칛thetsplot s칛rskilt anv칛ndbara.

De vanligaste graferna f칬r numeriska variabler 칛r **histogram** och l친ddiagram, s.k. **boxplots**. Ni kommer l칛ra er att plotta l친ddiagram i Datorlaboration 3 efter att ni g친tt igenom dom p친 F칬rel칛sning 5. En **t칛thetsplot** 칛r en utj칛mnad version av ett histogram.

Histogram kan ritas med hj칛lp av funktionen `histogram()` som finns i `mosaic` paketet, eller med funktionen `hist()` som inte kr칛ver n친got paket. B친da har sina f칬rdelar, d칛r `histogram` 칛r mer smidig n칛r man vill rita flera histogram samtidigt (mer om detta i Datorlaboration 3). H칛r 칛r ett exempel med funktionen `histogram()`:

```{r}
#| label: fig-hist
#| fig-cap: "Distribution of Age onboard the Titanic"
histogram(~ Age, data = titanic, col = "navyblue")
```

F칬rdelningen 칛r inte symmetrisk h칛r utan snarare skev 친t h칬ger, dvs. det finns en l친ng h칬gersvans. Men det finns 칛ven en hel del observationer best친ende av barn under fem 친r. Eftersom f칬rdelningen 칛r skev 칛r det sv친rare att gissa sig till medelv칛rdet. De flesta individerna verkar dock ha varit mellan 15-45 친r.

Argumentet `breaks =` kan anv칛ndas inuti funktionen `histogram()` f칬r att ange hur m친nga staplar man vill ha. R kommer d친 i s친 h칬g m친n som m칬jligt rita ett histogram med s친 m친nga staplar.

Ett histograms utseende beror p친 antalet staplar man v칛ljer. En t칛thetsplot 칛r ett s칛tt att plotta f칬rdelningen av data som inte beror p친 antalet staplar. En t칛thetsplot kan ritas med hj칛lp av funktionen `densityplot()` som finns i `mosaic` paketet.

```{r}
#| label: fig-density
#| fig-cap: "Distribution of Age onboard the Titanic"
densityplot(~ Age, data = titanic, col = "navyblue")
```

#### 游눩 Uppgift 4.1

Rita ett histogram likt ovan, med samma variabel men med en annan f칛rg. Testa dig fram med `breaks` argumentet tills du hittar vad du tycker 칛r ett passande antal staplar. Rita sedan ett till likadant histogram men anv칛nd dig av Sturges regel denna g친ng f칬r att best칛mma hur m친nga staplar som ska anv칛ndas. Ser histogrammet b칛ttre ut 칛n det du ritade utan Sturges regel?

```{r}
# Write your code here
```

::: callout-tip
Struges regel ges av $1 + log_2(n)$, d칛r n 칛r antalet dataobservationer. I R kan funktionen f칬r logaritmen med basen 2 f친s som `log2()`.
:::

::: calloout-tip
Anv칛nd listan i Appendix f칬r olika argument som kan anv칛ndas i grafer f칬r att g칬ra dem mer informativa.
:::

#### 游눩 Uppgift 4.2

Rita ett histogram 칬ver variabeln `Paid`.

```{r}
# Write your code here
```

#### 游눩 Uppgift 4.3

Vilket m친tt av medelv칛rdet eller medianen beskriver centralpunkten i f칬rdelningen f칬r `Paid` b칛st?

#### 游눩 Uppgift 4.4

Rita t칛thetsplottar f칬r variablerna `Age` och `Paid`.

```{r}
# Write your code here
```

::: {.callout-note icon="false"}
## Extra: Fr친n histogram till Stapeldiagram (detta avsnitt kan skippas)

Histogram kan ses som en motsvarighet till stapeldiagram n칛r man har en numerisk variabel. Fr친n funktionen `hist()` kan man 칛ven h칛mta ut hur m친nga observationer det 칛r som tillfaller varje 친ldersintervall. L친t oss f칬rst rita ett histogram nedan och spara detta med namnet `hist_Age`. Sedan kan man extrahera antalet inom varje 친ldersintervall med hj칛lp av \$-tecknet f칬ljt av `count` som r칛knar ut antal observationer inom varje intervall.

```{r}

hist_Age = hist(x = Age,  col = "coral")
frequencies = hist_Age$count
frequencies

```

Dessa summeras inte 칬verraskande nog till 2205 (dvs antal observerade v칛rden). H칛rn칛st kan man titta p친 hur R definierar gr칛nserna f칬r varje stapel med hj칛lp av `breaks` som ocks친 finns i `hist()` funktionen:

```{r}
hist_Age$breaks
```

Vi har allts친 친ldersintervallen "0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", "70-74". Dessa kan anv칛ndas f칬r att skapa ett stapeldiagram likt nedan, denna g친ng med funktionen `barplot()` som finns inbyggd i R.

I det f칬rsta argumentet i funktionen `barplot()` l칛gger vi in frekvenserna som nyss r칛knades ut. Det andra argumentet `names.arg` 칛r till f칬r att namnge de olika 친ldersintervallen ovan, p친 x-axeln. Argumentet `las = 3` g칬r endast s친 att texten p친 x-axeln blir lodr칛t.

```{r}

Age_Intervals = c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29", "30-34", 
              "35-39", "40-44", "45-49", "50-54", "55-59", "60-64", "65-69",
              "70-74")

barplot(frequencies, names.arg = Age_Intervals, las = 3,
        main = "Frequency of Age onboard the Titanic")
```

Histogrammet som skapades innan g친r allts친 i princip att g칬ra om till ett stapeldiagram, d칛r h칬jden p친 stapeln illustrerar hur m친nga observationer det 칛r som tillfaller varje 친lderskategori.
:::

## 5. Numerisk beskrivning av kvantitiva variabler

Om man anv칛nder sig av en frekvenstabell f칬r en numerisk variabel riskerar man i v칛rsta fall att f친 en tabell som 칛r lika l친ng som antal observationer man har. Kanske har man inte ens ett enda fall d칛r tv친 olika observationer har samma v칛rden. D칛rf칬r anv칛nds ofta andra beskrivande m친tt. Bland de viktigaste 칛r **l칛gesm친tten** som f친ngar f칬rdelningens mittpunkt

-   medelv칛rde
-   median

och spridningsm친tten som m칛ter variationen kring f칬rdelningens mittpunkt:

-   varians
-   standardavvikelse
-   variationsbredd (`range` p친 engelska: skillnaden mellan maximum och minimumv칛rdet)
-   Interkvartila avst친ndet (IQR).

Funktionen `favstats()` i `mosaic`-paketet ber칛knar dessa m친tt:

```{r}
favstats(~ Age, data = titanic)
```

Funktionen r칛knar ut olika f칬rdelningsm친tt, s친som minimumv칛rdet, maximumv칛rdet, f칬rsta och tredje kvartilen samt medelv칛rdet och medianen. B친de medelv칛rdet och medianen 칛r m친tt p친 en f칬rdelnings mittpunkt men hur l칛mpliga de 칛r som m친tt beror p친 f칬rdelningens utseende. Vi ser 칛ven att funktionen ocks친 skriver ut hur m친nga v칛rden datasetet best친r av och antalet saknade v칛rden.

Ibland vill man dock inte skriva ut all denna information f칬r en variabel. I Datorlaboration 1 anv칛nde vi oss av funktionen `mean()` f칬r att r칛kna ut medelv칛rdet av en variabel. N친gra andra vanliga funktioner ut칬ver dessa 칛r `var()` och `sd()`. Matematiskt motvaras dessa tre funktioner av: \begin{align}\nonumber
\overline{y}= \frac{1}{n} \sum_{i=1}^n y_i \\ \nonumber
s^2 =\frac{\sum_{i=1}^n(y_i-\overline{y})^2}{n-1}
\end{align} och \begin{align}
s = \sqrt{s^2}
\end{align}

#### 游눩 Uppgift 5.1

Anv칛nd funktionerna ovan f칬r att r칛kna ut medelv칛rdet, variansen och standardavvikelsen f칬r variabeln `Age`. Kan man r칛kna ut standardavvikelsen p친 n친got annat s칛tt i R?

```{r}
# Write your code here
```

#### 游눩 Uppgift 5.2

R칛kna ut det variationsbredden samt det interkvartila avst친ndet av variabeln `Age` fr친n utskriften vi fick fr친n funktionen `favstats()`.

```{r}
# Write your code here
```

## 6. Indexering och upprepning (loopar)

L친t oss titta p친 ett dataset 칬ver UFC's top 10 kampsportsut칬vare i Welterweight klassen bland m칛n (december 2022). Nedan matas v칛rdena in i vektorer och sedan s칛tts alla variabler ihop i en och samma tabell med funktionen `data.frame()`:

```{r}
# Defining variables:
Name = c("Kamaru Usman", "Colby Covington", "Khamzat Chimaev", "Belal Muhammed",
         "Gilbert Burns","Stephen Thompson", "Geoff Neal", "Sean Brady", 
         "Vicente Luque", "Shavkat Rakhmanov" )
Rank = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
Wins_by_knockout = c(9, 4, 6, 5, 6, 8, 9, 3, 11, 8)
Takedown_avg = c(3.01, 4.05, 3.98, 2.19, 2, 0.27, 0.59, 2.8, 0.51, 2.31)
Age_fighters = c(35,34,27, 34, 35, 39, 31, 29, 30, 27)

# Creating a dataframe with all the variables just defined above:
UFC = data.frame(Name, Rank, Wins_by_knockout, Takedown_avg, Age_fighters)
UFC

```

Datasetet best친r av fem stycken variabler och 칛r sorterat efter `Rank`. I Lab 1 tittade vi lite p친 **indexering** och detta bygger vidare p친 det. L친t s칛ga att vi vill veta vad 친ldern 칛r f칬r den 6:e rankade ut칬varen. I detta fall 칛r datasetet v칛ldigt litet och man kan genast identifiera alla individer. Ibland har vi dataset som 칛r v칛ldigt stora och d친 kan man beh칬va anv칛nda sig av indexering f칬r att f친 ut information om en enskild (eller ett f친tal) observationer av intresse. F칬r att ta reda p친 친ldern p친 den 6:e rankade ut칬varen kan man d친 anv칛nda sig av koden `UFC[6, 5]`. D칛r siffran till v칛nster om kommatecknet i hakparantesen anger radtalet och siffran till h칬ger om kommatecknet anger kolumntalet. Detta ger oss svaret 39.

#### 游눩 Uppgift 6.1

Anv칛nd indexering f칬r att skriva ut hur m친nga wins by knockout Gilbert Burns har haft.

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.2

Anv칛nd indexering f칬r att skriva ut all information om Kamaru Usman (dvs den f칬rsta raden). \[Ledtr친d: om man inte skriver n친got alls efter kommatecknet i indexeringen f친r man *alla* v칛rden i den raden\]

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.3

Anv칛nd indexering f칬r att skriva ut alla v칛rden f칬r variabeln `Takedown_avg` (dvs den 4:e kolumnen).

```{r}
# Write your code here
```

En **loop** kan v칛ldigt kort beskrivas som en procedur som 친terupprepas s친 l칛nge ett visst f칬rh친llande 칛r uppfyllt. Det finns tre vanliga loopar i R. Dessa 칛r `for`-loop, `while`-loop och `repeat`-loop. De tv친 f칬rsta 칛r de vanligaste men vi kommer 칛n s친 l칛nge bara titta p친 `for`-loopen.

S칛g att du vill skriva en kod som skriver ut alla tal mellan 1 och 10 p친 sk칛rmen. Du skulle kunna skriva print(1) f칬ljt av print(2) osv, men skulle vara jobbigt. Kan vi f친 datorn att g칬ra det jobbet 친t oss genom att anv칛nda en `for`-loop? Svar ja. Nedan ges ett exempel p친 en loop som skriver ut talen mellan 1-10 med hj칛lp av `print()` funktionen. Det 칛r ett exempel p친 den kanske mest grundl칛ggande loopen, men den illustrerar 칛nd친 en viktig princip. F칬r att starta loopen anv칛nds ordet `for` f칬ljt av en parentes. Vad som st친r inom parentesen 칛r v칛ldigt viktigt och det f칬rsta argumentet 칛r namnet p친 en s친 kallad indexvariabel, i detta fall `i`. Efter detta specificerar man fr친n vilken siffra `i` b칬rjar p친 samt vilken siffra `i` slutar p친. H칛r b칬rjar den p친 1 och slutar p친 10. Efter parentesen bildar man en ny s친 kallad klammerparentes (som ser ut som m친svingar). D칛r inne specificerar man allt som ska h칛nda i varje upprepningen i loopen. I det h칛r exemplet vill vi att loopen ska skriva ut indexnumret, ett i taget:

```{r}
for (i in 1:10){
  print(i)
}

```

Allts친 skriver loopen ut vad `i` 칛r under varje *iteration* (dvs upprepning).

#### 游눩 Uppgift 6.4

Anv칛nd loopen ovan men byt ut indexvariabeln `i` till `k` ist칛llet. K칬r sedan loopen. Vad 칛r det som h칛nder?

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.5

Anv칛nd 친terigen loopen i exemplet ovan. Men 칛ndra variabeln `i`s definitionsm칛ngd fr친n 1:10 till 24:33.

```{r}
# Write your code here
```

#### 游눩 Uppgift 6.6

G칬r p친 samma vis som i 칬vningen ovan men 칛ndra nu definitionsm칛ngden fr친n 1:10 till -3:5

```{r}
# Write your code here
```

Nedan ges ett exempel p친 en `for`-loop som skriver ut namnet p친 en enskild variabel (`Name`) i tur och ordning. H칛r anv칛nds indexering av variabeln `Name` f칬r att endast ett namn ska skrivas ut i varje iteration, och d친 i samma ordning som den f칬rekommer i variabeln.

```{r}

for(i in 1:10){
  print(Name[i])
}

```

::: callout-note
H칛r anv칛ndes endast en variabel `Name` (som faktiskt definierades innan dataframen `UFC`). D칛rf칬r anv칛nds inte n친got kommatecken inuti hakparantesen. Det beror allts친 p친 att det h칛r 칛r en enskild definierad variabel utanf칬r dataframen `UFC`.
:::

#### 游눩 Uppgift 6.7

Anv칛nd en `for`-loop f칬r att skriva ut varje v칛rde p친 variabeln `Wins_by_knockout`.

```{r}
# Write your code here
```

Den introduktionen till loopar kan r칛cka f칬r tillf칛llet. Men om du tyckte det var intressant kan du forts칛tta l칛sa lite mer om loopar nedan. Annars kan du hoppas till [Sammanfattningen av Lab 2](#sammanfattning).

Man kan 칛ven g칬ra matematiska utr칛kningar med hj칛lp av en loop. L친t s칛ga att vi vill r칛kna ut vad $2^6$ 칛r (d칛r 2 칛r basen och 6 칛r exponenten). Detta kan enkelt g칬ras med den matematiska operationen `^` i R vilket ger oss resultatet 64. Men eftersom vi 칛lskar att loopa s친 kommer vi ocks친 칛lska f칬ljande exempel d칛r vi r칛knar ut detta v칛rde f칬r hand med en loop.

F칬rst m친ste man definiera ett startv칛rde. Detta g칬rs med variabeln `myProduct` nedan. Eftersom utr칛kningen av $2^6 = 2\cdot 2\cdot 2\cdot 2\cdot 2\cdot 2 = 64$ egentligen bara 칛r multiplikation, m친ste startv칛rdet vara like med 1 (anv칛nds 0 kommer slutresultatet ocks친 att bli 0). D칛refter kan loopen startas. Den kommer att iterera fr친n v칛rdet 1 till 6 (eftersom exponenten 칛r 6). Efter f칬rsta iterationen (loop-omg친ngen) kommer `myProduct` att vara 1 multiplicerat med 2, dvs 2. Detta v칛rde sparas i `myProduct` och syns n칛r man skriver ut resultatet med `print(myProduct)` inuti loopen. I den andra iterationen multipliceras `myProduct` med 2 igen, och detta v칛rde sparas nu i `myProduct`. Resultatet 칛r $2\cdot2=4$. Den tredje iterationen multipliceras 4 med 2 och `myProduct` uppdateras till detta nya v칛rde 8. Denna procedur upprepas tills antal iterationer `i` har n친tt upp till 6 g친nger. D칛refter avslutas loopen och `myProduct` visar d친 svaret p친 vad $2^6$ 칛r:

```{r}

myProduct = 1 # We have to start with 1 here since it's multiplication

for (i in 1:6){
  myProduct = myProduct * 2  # multiplying with 2 in each iteration
  print(myProduct) # prints the result after each iteration
}
myProduct # final result


```

#### 游눩 Uppgift 6.8

Funktionen `sum()` i R kan anv칛ndas f칬r att summera numeriska v칛rden i en vektor. Anv칛nd denna funktion f칬r att r칛kna ut medelv칛rdet f칬r variabeln `Age_fighters` ovan.

```{r}
# Write your code here
```

::: callout-tip
Medelv칛rdet ges av formeln: \begin{align}
\nonumber \overline{y}= \frac{1}{n} \sum_{i=1}^n y_i
\end{align}
:::

#### 游눩 Uppgift 6.9

Anv칛nd en `for`-loop f칬r att r칛kna ut medelv칛rdet f칬r variabeln `Age_fighters`.

```{r}
# Write your code here
```

::: callout-tip
Skapa ett startv칛rde f칬r summan och s칛tt detta v칛rde till 0. Sedan inuti loopen m친ste du ocks친 anv칛nda dig av indexering f칬r att s칛ga till R vilket v칛rde i denna variabel du vill addera till din befintliga summa.
:::

## 7. Sammanfattning {#sammanfattning}

::: callout-info
## I den h칛r laborationen har du l칛rt dig:

-   Metoder f칬r att presentera en variabels f칬rdelning och att man anv칛nder olika metoder beroende p친 om en variabel 칛r numerisk eller kategorisk.

-   Hur man praktiskt kan presentera kategoriska variabler i tabellform samt illustrera dem grafiskt med paj- och stapeldiagram.

-   Hur man kan rita ett histogram och en t칛thetsplot.

-   Kopplingen mellan histogram och stapeldiagram.

-   Vilka beskrivande m친tt man kan anv칛nda sig av f칬r numeriska variabler.

-   N친gra exempel p친 vad en `for`-loop kan anv칛ndas till.
:::

## A. Appendix

Lista 칬ver n친gra vanliga argument i grafer

-   col = f칛rg, kan markeras med siffror eller med namnet p친 f칛rgen, oftast med sm친 bokst칛ver. Gl칬m ej att texten m친ste ligga inom citattecken.

-   main = rubrik p친 plotten, detta s칛tts till en textstr칛ng, allts친 en text inom citattecken.

-   xlab = rubrik p친 x-axeln, detta s칛tts till en textstr칛ng, allts친 en text inom citattecken.

-   ylab = rubrik p친 y-axeln, detta s칛tts till en textstr칛ng, allts친 en text inom citattecken.

-   xlim = definitionsomr친de f칬r x-axeln. Exempelvis betyder xlim = c(0, 14.3) att det l칛gsta v칛rdet som ritas kommer att vara 0 och det h칬gsta v칛rdet kommer att vara 14.3 (p친 x-axeln).

-   ylim = definitionsomr친de f칬r y-axeln. Exempelvis betyder ylim = c(-2, 20.7) att det l칛gsta v칛rdet som ritas kommer att vara -2 och det h칬gsta v칛rdet kommer att vara 20.7 (p친 y-axeln).

-   lwd = tjocklecken p친 linjer (eller prickar) i ett linjediagram (spridningsdiagram), anges med ett nummer.

-   lty = typ av linje (rak, streckad, prickad etc) i ett linjediagram, anges med ett nummer.

-   pch = typ av prick (rund, fyrkantig + \* etc), s칛tts till ett nummer.

-   breaks = antal staplar i ett histogram.

-   cex = justering av etiketternas storlek i en figur (exempelvis cex = 0.5 i en `legend()` funktion minskar storleken som "legend-texten" tar upp i en figur med h칛lften). Finns 칛ven exempelvis cex.axis, cex.main f칬r att justera storleken av texter p친 axlar respektive rubrik.

-   bg = bakgrundsf칛rg i en figur.

-   col.main = rubrikens f칛rg.

-   col.lab = f칛rger f칬r rubrikerna p친 axlarna.

-   font = specificerar vilken typ av text man vill ha, exempelvis ger font = 3 kursiv text.
