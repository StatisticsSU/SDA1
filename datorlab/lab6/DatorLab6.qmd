---
title: "Statistik och dataanalys I, 15 hp "
subtitle: "Datorlaboration 6 - Konfidensintervall och hypotesttest"
author: 
  - Mattias Villani
date: last-modified
format: 
  html:
    self-contained: true
toc: true
execute:
  error: false
language: 
  title-block-author-single: " "
toc-title-document: "Inneh친ll"
crossref-fig-title: "Figur"
theme: Superhero
title-block-banner-color: Primary
title-block-published: "Publicerad"
callout-warning-caption: "Varning"
callout-note-caption: "Observera"
callout-tip-caption: "Tips"
editor: visual
---

## Introduktion och viktig f칬rberedande information

> I den h칛r datorlabben kommer vi att arbeta med konfidensintervall och hypotestest

::: callout-warning
## Installera paket

Den h칛r labben f칬ruts칛tter inga installerade paket.
:::

::: callout-important
## Skapa mapp f칬r labben

Skapa en mapp `Lab6` i din kursmapp SDA1. Ladda ner Quarto-filen f칬r denna lab genom att h칬gerklicka [h칛r](https://github.com/StatisticsSU/SDA1/raw/main/datorlab/lab6/DatorLab6.qmd) och v칛lj 'Spara l칛nk' eller n친got likande fr친n menyn som dyker upp. Spara filen i din `Lab6` mapp. 칐ppna Quarto-filen i RStudio och forts칛tt med denna laboration direkt i Quarto-dokumentet, d칛r du ocks친 fyller i svaren p친 dina laborations칬vningar.
:::

### Looping as a way of life

I den h칛r uppgiften kommer ni beh칬va **upprepa** ber칛kningar ett stort antal g친nger. D친 anv칛nder vi **loopar**, framf칬rallt den s k `for`-loopen. H칛r 칛r en enkel loop som ber칛knar kvadraten av alla tal mellan 1 och 10 och sparar resultaten i en vektor `kvadrater`:

```{r}
kvadrater = rep(0, 10) # Skapar vektor med nollor d칛r vi sen sparar varje kvadrat
for (i in 1:10){
  kvadrater[i] = i^2
}
kvadrater
```

Vi kan g칬ra precis samma loop p친 lite annorlunda s칛tt:

```{r}
kvadrater = rep(0, 10) 
min_loop_vektor = 1:10
for (i in min_loop_vektor){
  kvadrater[i] = i^2
}
```

Notera att R allts친 kan loop:a 칬ver vilken vektor som helst. R l칛ser `for`-loopen ovan som 'upprepa kommandot `print(i^2)` f칬r alla v칛rden p친 `i` tagna fr친n vektorn `min_loop_vektor` och spara resultatet i den `i`:te positionen i vektorn `kvadrater`.

Genom att anv칛nda `seq()` funktionen kan vi t ex loop:a 칬ver v칛rdena 0.1, 0.2,..., 0.9, 1 s친 h칛r:

```{r}
min_loop_vektor = seq(0.1, 1, by = 0.1)
for (i in min_loop_vektor){
  print(i^2)
}
```

Men hur g칬r vi om vi vill spara dessa kvadrater i en vektor `kvadrater` som vi gjorde ovan? Vi kan inte l칛ngre anv칛nda loop-variabeln `i` f칬r tala om f칬r R att placera kvadraten `i^2` p친 den `i`:te positionen i `kvadraten`. Variabeln `i` r칛knar ju inte l칛ngre fr친n 1 till 10! Den r칛knar ju 0.1, 0.2,..., 0.9, 1.

L칬sningen 칛r att skapa ytterligare en variabel som h친ller reda p친 var i vektorn `kvadrater` som resultat ska sparas. Jag kallar den variabel `count`, men den kan heta vad som helst.

```{r}
kvadrater = rep(0, 10)
min_loop_vektor = seq(0, 1, by = 0.1)
count = 0
for (i in min_loop_vektor){
  count = count + 1
  kvadrater[count] = i^2
}
kvadrater
```

Notera hur jag f칬rst satte `count` till `0` innan loopen och hur jag sen inne i loopen 칬kade `count` med ett i varje upprepning.

Ok, nu testar vi den h칛r kunskapen p친 ett lite, lite mer avancerat problem. S칛g att vi vill simulera fr친n samplingf칬rdelningen f칬r stickprovsandelen $\hat p$ med data fr친n modellen

$$
X_1,X_2,\ldots,X_n \overset{iid}{\sim}\mathrm{Bernoulli}(p)
$$

d칛r *p=0.3* och stickprovsstorleken *n=100*. Vi g칬r detta genom att simulera 1000 olika stickprov fr친n modellen. F칬r varje stickprov med *n=100* observationer ber칛knar vi andelen $\hat p$ och sparar denna andel i en l친ng vektor. Sen plottar vi f칬rdelningen av dessa 1000 st v칛rden p친 $\hat p$ med ett histogram. Here we go!

```{r}
p = 0.3              # andelen i populationen/modellen
nsim = 1000          # vi vill simulera 1000 olika stickprov
n = 100              # varje stickprov best친r av 10 observationer.
phats = rep(0, nsim) # skapar vektor d칛r andelen (phat) i varje stickprov sparas.
count = 0            
for (i in 1:nsim){
  count = count + 1
  x = rbinom(n, size = 1, prob = p) # size = 1 g칬r att binomialf칬rdelningen blir en Bernoulli.
  phats[count] = mean(x)            # mean(x) ger oss andelen phat.
}
hist(phats, 50)
```

Som en sista 칬vning med loopar, l친t oss ber칛kna sannolikheten $P(X\leq 0.5)$ f칬r en Bernoulli-variabel med sannolikheten $p$ d칛r vi varierar $p$ mellan 0 och 1 i steg av 0.01:

```{r}
ps = seq(0, 1, by = 0.01)
probability = rep(0, length(ps)) # funktionen length() r칛knar antalet element in en vektor
count = 0            
for (p in ps){   # man f친r anv칛nda annat namn 칛n i som loop-variabel
  count = count + 1
  probability[count] = pbinom(0.5, size = 1, prob = p)  # p 칛ndras i varje upprepning
}
plot(ps, probability, type = "l", xlab = "p", ylab = "P(X<=0.5)")
```

## Konfidensintervall och test f칬r en andel

#### 游눩 Uppgift 1.1

P친 f칬rel칛sningen om konfidensintervall f칬r en andel s친g vi att andelen S-v칛ljare *p* skattades till 0.371 i SVT/Novus unders칬kning i Februari 2023 baserat p친 ett stickprov av *n=3539* personer d칛r allts친 1313 person angav att de skulle r칬sta p친 S. Vi s친g ocks친 att ett 95% konfidensintervall f칬r *p* var (0.355, 0.387).

M친naden innan (SVT/Novus, Januari 2023) skattades andelen S-v칛ljare till 0.347 (samma antal personer tillfr친gades och 1228 personer angav att de skulle r칬sta p친 S). Anv칛nd funktionen `prop.test` f칬r att ber칛kna ett 95% konfidensintervall f칬r *p* i Januari 2023.

Ber칛kna 칛ven detta konfidensintervall med formeln

$$
\hat p \pm z_{\alpha/2}\cdot\sqrt{\frac{pq}{n}}
$$

Anv칛nd konfidensintervallen f칬r Januari och Februari 2023 f칬r att f칬rklara Novus p친st친ende (vad g칛ller S):

*I den senaste unders칬kningen fr친n SVT/Novus (*Februari 2023) *칛r ingen f칬r칛ndring statistiskt s칛kerst칛lld.*

#### 游눩 Uppgift 1.2

I senaste valet fick S 30,33% av r칬sterna. Anv칛nda `prop.test` f칬r att testa p친 5% signifikansniv친 om andelen S-v칛ljare i i Februari 2023 칛r f칬r칛ndrat sedan valet.

## Konfidensintervall och test f칬r ett v칛ntev칛rde

#### 游눩 Uppgift 2.1

I 칐vning 20.65 i SDA-boken analyseras data f칬r m칛ngden socker i frukostflingor (gram per 100 gram flingor) f칬r flingor som riktar sig till barn (`child_sugar`):

```{r}
child_sugar = c(40.3,55.0,45.7,43.3,50.3,45.9,53.5,43,44.2,44,47.4,44,33.6,55.1,48.8,50.4,37.8,60.3,46.6)
```

L친t oss analysera `child_sugar` med modellen

$$X_1,X_2,\ldots,X_n \overset{iid}{\sim}N(\mu,\sigma)$$

Anv칛nd R f칬r att ber칛kna ett 95%-igt konfidensintervall f칬r $\mu$, b친de genom att anv칛nda formeln

$$\bar x \pm t_{\alpha/2,n-1}\frac{s}{\sqrt n}$$

och genom att anv칛nda funktionen `t.test`.

#### 游눩 Uppgift 2.2

Anv칛nd funktionen `t.test` f칬r att utf칬ra testet:

$$
\begin{align}
&H_0: \mu = 50 \\
&H_1:\mu\neq50
\end{align}
$$

genom att ber칛kna *p*-v칛rdet f칬r testet och f칬rkasta $H_0$ om *p*-v칛rdet 칛r mindre 칛n $\alpha =0.05$. Dvs testa p친 5% signifikansniv친. Tolka resultatet fr친n testet.

#### 游눩 Uppgift 2.3

Upprepa testet i uppgiften ovan f칬r olika v칛rden p친 nollhypotesens v칛rde, $\mu_0$. Prova alla v칛rden p친 nollhypotesen $\mu_0$ i vektorn `seq(40, 50, by = 0.1)`, dvs utf칬r testet i uppgiften ovan med $\mu_0 = 40$, sen med $\mu_0=40.1$ osv 칛nda till $\mu_0=50$. Registera om du f칬rkastar $H_0$ eller inte f칬r varje v칛rde p친 $\mu_0$. F칬r vilka v칛rden p친 $\mu_0$ f칬rkastar du $H_0$? J칛mf칬r med konfidensintervallet i Uppgift 2.1.

::: callout-tip
## Tips

Anv칛nd en for-loop f칬r att loop:a 칬ver alla v칛rden p친 $\mu_0$. Anv칛nd min kod ovan som ber칛kna sannolikheten $P(X\leq 0.5)$ f칬r en Bernoulli-variabel med sannolikheten $p$ som en mall f칬r denna loop.

Resultatet fr친n `t.test` 칛r en lista. S친 anv칛nd \$-tecknet f칬r att plocka ut *p*-v칛rdet fr친n resultat-listan fr친n testet (t ex `resultat$p.value`) om du sparat resultatet fr친n `t.test` i variabeln `resultat`).
:::

#### 游눩 Uppgift 2.4

Du 칛r egentligen intresserad av att bevisa att den genomsnittliga sockerm칛ngden i barnflingor 칛r **mer** 칛n 40 gram. Dvs, du vill testa den enkelsidiga hypotesen p친 signifikansniv친n $\alpha =0.05$:

$$
\begin{align}
&H_0: \mu \leq 40 \\
&H_1: \mu > 40
\end{align}
$$

anv칛nd funktionen `t.test` f칬r att testa detta. Tips: l칛s i hj칛lpen `?t.test`.
